library(DBI)
library(RPostgres)
# Crear el data.frame
nombres <- c("Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Hannah", "Ivy", "Jack")
edades <- c(25, 32, 28, 45, 30, 37, 22, 29, 34, 40)
fechas <- c("2024-01-01 10:00:00", "2024-01-02 11:30:00", "2024-01-03 14:45:00",
"2024-01-04 09:15:00", "2024-01-05 16:00:00", "2024-01-06 08:30:00",
"2024-01-07 13:45:00", "2024-01-08 12:00:00", "2024-01-09 15:30:00",
"2024-01-10 10:45:00")
datos <- data.frame(nombre = nombres, edad = edades, fecha = as.POSIXct(fechas))
# Establecer la conexión a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS conexion_r (
id SERIAL PRIMARY KEY,
nombre VARCHAR(255),
edad INT,
fecha TIMESTAMP
);
"
dbExecute(con, create_table_query)
# Insertar valores en la tabla
for (i in 1:nrow(datos)) {
query <- sprintf("INSERT INTO conexion_r (nombre, edad, fecha) VALUES ('%s', %d, '%s')",
datos$nombre[i], datos$edad[i], format(datos$fecha[i], "%Y-%m-%d %H:%M:%S"))
dbExecute(con, query)
}
# Verificar que los valores se han insertado
result <- dbGetQuery(con, "SELECT * FROM conexion_r")
print(result)
# Cerrar la conexión
dbDisconnect(con)
library(readxl)
library(tidyverse)
options(scipen=999)
#2024 vigente
#Este script lee la BBDD 2022-2023, procesa los meses que quiero de 2024 y los consolida en una bbdd unica
meses <- c(1,2,3)
estab <- c(1,2,3,4,5,6,7,8)
#anio_procesar <- 2023
establecimientos <- read_excel("G:/Mi unidad/01_SIGCOM/01_Cubos 9/2023/2022 con tablas de apoyo.xlsx",
sheet = "Establecimientos")
conversion <- read_excel("G:/Mi unidad/01_SIGCOM/01_Cubos 9/2023/2022 con tablas de apoyo.xlsx",
sheet = "Conversión 2022 a 2023") %>%
filter(`Tipo de IC` != "0")
conversion <- mutate_all(conversion, ~replace(., is.na(.), 0)) %>%
mutate(Item = if_else(Item == "0", `Cubo 9 Macro`, Item)) %>%
select(- `Cubo 9 Macro`) %>%
unique(.)
BBDD_2022_2023 <- read_excel("G:/Unidades compartidas/08_DIS_2/7. Financiamiento/2023/5. SIGCOM/1. Cubo 9/BBDD_2022_2023.xlsx")
BBDD_2022_2023$Año <- as.character(BBDD_2022_2023$Año)
BBDD_2022_2023$Mes <- as.character(BBDD_2022_2023$Mes)
CC <- read_excel("G:/Mi unidad/01_SIGCOM/01_Cubos 9/2023/2022 con tablas de apoyo.xlsx",
sheet = "CC")
indirecto <- read_excel("G:/Mi unidad/01_SIGCOM/01_Cubos 9/2023/2022 con tablas de apoyo.xlsx",
sheet = "Otros_indirectos")
consolida <- data.frame(Año = 1900, Mes = 1, Establecimiento = "eliminar", Centros_Costo = "eliminar", Item= "eliminar", Monto = 1)
calidad_de_datos <- data.frame(mes = 0, establecimiento = establecimientos$Establecimiento[1], total_cubo = 0, total_pivoteado = 0)
for (i in meses) {
y <- ifelse(i>=10, as.character(i), paste0("0",i))
for (j in estab) {
tabla <- read_excel(paste0("G:/Mi unidad/01_SIGCOM/01_Cubos 9/2024/Cubo 9_2024_",y,"_",establecimientos$`Cod DEIS`[j],"_",establecimientos$Establecimiento[j],".xlsx"),
range = establecimientos$Coordenada[j])
colnames(tabla)[1] <- "Item"
tabla_pivot <- tabla %>%
pivot_longer(!Item, names_to = "Centros_Costo", values_to = "Monto") %>%
mutate(Año = "2024", Mes = as.character(i), Centros_Costo = Centros_Costo,
Item = case_when(Item == "REMUNERACIÓN" ~ "Salario",
TRUE ~ Item),
Establecimiento = establecimientos$Establecimiento[j]) %>%
group_by(Item, Año, Mes,Establecimiento, Centros_Costo) %>%
summarise(Monto = sum(Monto)) %>%
select(Año, Mes, Establecimiento, Centros_Costo, Item, Monto)
consolida <- rbind(consolida, tabla_pivot) %>% filter(Año != 1900)
consolida <- consolida %>%
mutate("Prod. Primaria" = if_else(Item == "Total Produccion 1", Monto, 0),
"Prod. Secundaria" = if_else(Item == "Total Produccion 2", Monto, 0),
"Prod. Terciaria" = if_else(Item == "Total Produccion 3", Monto, 0),
"Prod. Cuarta" = if_else(Item == "Total Produccion 4", Monto, 0),
"Nro Camas" = if_else(Item == "Numero de Camas", Monto, 0),
Monto  = if_else(Item == "Total Produccion 1" |
Item == "Total Produccion 2" |
Item == "Total Produccion 3" |
Item == "Total Produccion 4" |
Item == "Numero de Camas", 0, Monto),
Item = case_when(Item == "Total Produccion 1" ~ "Salario",
Item == "Total Produccion 2" ~ "Salario",
Item == "Total Produccion 3" ~ "Salario",
Item == "Total Produccion 4" ~ "Salario",
Item == "Numero de Camas" ~ "Salario",
TRUE ~ Item))  %>%
group_by(Item, Año, Mes,Establecimiento, Centros_Costo) %>%
summarise(Monto = sum(Monto),
`Prod. Primaria` = sum(`Prod. Primaria`),
`Prod. Secundaria` = sum(`Prod. Secundaria`),
`Prod. Terciaria` = sum(`Prod. Terciaria`),
`Prod. Cuarta` = sum(`Prod. Cuarta`),
`Nro Camas` = sum(`Nro Camas`)
) %>%
select(Año, Mes, Establecimiento, Centros_Costo, Item, Monto, `Prod. Primaria`,
`Prod. Secundaria`, `Prod. Terciaria`, `Prod. Cuarta`, `Nro Camas`)
consolida <- mutate_all(consolida, ~replace(., is.na(.), 0))
consolida <- left_join(consolida, establecimientos)
consolida <- left_join(consolida, CC)
consolida <- left_join(consolida, conversion) #aca duplica
consolida <- mutate_all(consolida, ~replace(., is.na(.), 0))
consolida <- consolida %>%
mutate("Centros de Costo" = Centros_Costo,
"Ítem de Costo" = `Item`,
"Fecha" = paste0(Año,"-",Mes),
"Tipo de IC" = if_else(`Tipo de IC` == "0" & `Ítem de Costo` %in% indirecto$Indirecto, "Indirectos", `Tipo de IC`),
) %>%
select(`Centros de Costo`,
`Código Ítem de Costo`,
`Ítem de Costo`,
Monto,
`Prod. Primaria`,
`Prod. Secundaria`,
`Prod. Terciaria`,
`Prod. Cuarta`,
`Tipo de IC`,
Establecimiento,
`Tipo de CC`,
`Tipo At.`,
Fecha,
`Nro Camas`,
`Cod DEIS`,
Agrupación,
`Desc Agrupación`,
`Macro Zona`,
Región,
`Servicio de Salud`,
Año,
Mes,
`Fijos y Variables`,
`Clasificación 2`,
Clúster, - Centros_Costo) %>%
filter(`Centros de Costo` != "TOTAL" &
`Centros de Costo` != "INDIRECTOS" &
`Centros de Costo` != "GASTOS GENERALES" &
`Centros de Costo` != "DIRECTOS" &
`Centros de Costo` != "INSUMOS" &
`Centros de Costo` != "RECURSO HUMANO") %>%
filter(`Tipo de IC` != "0" &  `Tipo de IC` != "0.0")
consolida$Item <- NULL
BBDD_2022_2023 <- rbind(consolida, BBDD_2022_2023)
BBDD_2022_2023 <- BBDD_2022_2023 %>%
mutate(Eliminar = if_else(Monto > 0 | `Prod. Primaria`> 0 | `Prod. Secundaria`> 0 | `Centros de Costo` == "CENTRO DE COSTOS EXTERNO", "No Eliminar", "Eliminar")) %>%
mutate(Eliminar = if_else(`Centros de Costo` == "CENTRO DE COSTOS EXTERNO", "No Eliminar", Eliminar)) %>%
filter(Eliminar == "No Eliminar")
BBDD_2022_2023$Eliminar <- NULL
total_cubo <- tabla %>% filter(Item == "TOTAL GENERAL")
total_cubo <- data.frame(mes = i,
establecimiento = establecimientos$Establecimiento[j],
total_cubo = rowSums(total_cubo[ , c(2:ncol(total_cubo))], na.rm=TRUE),
total_pivoteado = sum(consolida$Monto))
calidad_de_datos <- rbind(calidad_de_datos, total_cubo) %>% filter(mes != 0)
}
}
View(BBDD_2022_2023)
glimpse(BBDD_2022_2023)
BBDD_historica <- BBDD_2022_2023
# Conectar a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla sigcom_historico si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS sigcom_historico (
id SERIAL PRIMARY KEY,
centros_de_costo VARCHAR(255),
codigo_item_de_costo VARCHAR(255),
item_de_costo VARCHAR(255),
monto DOUBLE PRECISION,
prod_primaria DOUBLE PRECISION,
prod_secundaria DOUBLE PRECISION,
prod_terciaria DOUBLE PRECISION,
prod_cuarta DOUBLE PRECISION,
tipo_de_ic VARCHAR(255),
establecimiento VARCHAR(255),
tipo_de_cc VARCHAR(255),
tipo_at VARCHAR(255),
fecha VARCHAR(255),
nro_camas DOUBLE PRECISION,
cod_deis DOUBLE PRECISION,
agrupacion DOUBLE PRECISION,
desc_agrupacion VARCHAR(255),
macro_zona VARCHAR(255),
region VARCHAR(255),
servicio_de_salud VARCHAR(255),
año VARCHAR(255),
mes VARCHAR(255),
fijos_y_variables VARCHAR(255),
clasificacion_2 VARCHAR(255),
cluster VARCHAR(255)
);
"
dbExecute(con, create_table_query)
dbWriteTable(con, "sigcom_historico", BBDD_historica, append = TRUE, row.names = FALSE)
View(BBDD_historica)
View(BBDD_2022_2023)
library(janitor)
BBDD_historica <- clean_names(BBDD_2022_2023)
View(BBDD_historica)
glimpse(BBDD_historica)
# Conectar a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla sigcom_historico si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS sigcom_historico (
id SERIAL PRIMARY KEY,
centros_de_costo VARCHAR(255),
codigo_item_de_costo VARCHAR(255),
item_de_costo VARCHAR(255),
monto DOUBLE PRECISION,
prod_primaria DOUBLE PRECISION,
prod_secundaria DOUBLE PRECISION,
prod_terciaria DOUBLE PRECISION,
prod_cuarta DOUBLE PRECISION,
tipo_de_ic VARCHAR(255),
establecimiento VARCHAR(255),
tipo_de_cc VARCHAR(255),
tipo_at VARCHAR(255),
fecha VARCHAR(255),
nro_camas DOUBLE PRECISION,
cod_deis DOUBLE PRECISION,
agrupacion DOUBLE PRECISION,
desc_agrupacion VARCHAR(255),
macro_zona VARCHAR(255),
region VARCHAR(255),
servicio_de_salud VARCHAR(255),
ano VARCHAR(255),
mes VARCHAR(255),
fijos_y_variables VARCHAR(255),
clasificacion_2 VARCHAR(255),
cluster VARCHAR(255)
);
"
dbExecute(con, create_table_query)
# Insertar los datos del data.frame BBDD_historica en la tabla sigcom_historico
dbWriteTable(con, "sigcom_historico", BBDD_historica, append = TRUE, row.names = FALSE)
BBDD_historica <- clean_names(BBDD_2022_2023)
BBDD_historica$id <- seq_along(1:nrow(BBDD_historica))
# Conectar a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla sigcom_historico si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS sigcom_historico (
id SERIAL PRIMARY KEY,
centros_de_costo VARCHAR(255),
codigo_item_de_costo VARCHAR(255),
item_de_costo VARCHAR(255),
monto DOUBLE PRECISION,
prod_primaria DOUBLE PRECISION,
prod_secundaria DOUBLE PRECISION,
prod_terciaria DOUBLE PRECISION,
prod_cuarta DOUBLE PRECISION,
tipo_de_ic VARCHAR(255),
establecimiento VARCHAR(255),
tipo_de_cc VARCHAR(255),
tipo_at VARCHAR(255),
fecha VARCHAR(255),
nro_camas DOUBLE PRECISION,
cod_deis DOUBLE PRECISION,
agrupacion DOUBLE PRECISION,
desc_agrupacion VARCHAR(255),
macro_zona VARCHAR(255),
region VARCHAR(255),
servicio_de_salud VARCHAR(255),
ano VARCHAR(255),
mes VARCHAR(255),
fijos_y_variables VARCHAR(255),
clasificacion_2 VARCHAR(255),
cluster VARCHAR(255)
);
"
dbExecute(con, create_table_query)
# Insertar los datos del data.frame BBDD_historica en la tabla sigcom_historico
dbWriteTable(con, "sigcom_historico", BBDD_historica, append = TRUE, row.names = FALSE)
BBDD_historica$ano
glimpse(BBDD_historica)
BBDD_historica <- clean_names(BBDD_2022_2023)
BBDD_historica$id <- seq_along(1:nrow(BBDD_historica))
# Conectar a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla sigcom_historico si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS sigcom_historico (
id SERIAL PRIMARY KEY,
centros_de_costo VARCHAR(255),
codigo_item_de_costo VARCHAR(255),
item_de_costo VARCHAR(255),
monto DOUBLE PRECISION,
prod_primaria DOUBLE PRECISION,
prod_secundaria DOUBLE PRECISION,
prod_terciaria DOUBLE PRECISION,
prod_cuarta DOUBLE PRECISION,
tipo_de_ic VARCHAR(255),
establecimiento VARCHAR(255),
tipo_de_cc VARCHAR(255),
tipo_at VARCHAR(255),
fecha VARCHAR(255),
nro_camas DOUBLE PRECISION,
cod_deis DOUBLE PRECISION,
agrupacion DOUBLE PRECISION,
desc_agrupacion VARCHAR(255),
macro_zona VARCHAR(255),
region VARCHAR(255),
servicio_de_salud VARCHAR(255),
ano VARCHAR(255),
mes VARCHAR(255),
fijos_y_variables VARCHAR(255),
clasificacion_2 VARCHAR(255),
cluster VARCHAR(255)
);
"
dbExecute(con, create_table_query)
# Insertar los datos del data.frame BBDD_historica en la tabla sigcom_historico
dbWriteTable(con, "sigcom_historico", BBDD_historica, append = TRUE, row.names = FALSE)
BBDD_historica <- clean_names(BBDD_2022_2023)
library(readxl)
library(tidyverse)
library(DBI)
library(RPostgres)
library(janitor)
BBDD_historica <- clean_names(BBDD_2022_2023)
BBDD_historica$id <- seq_along(1:nrow(BBDD_historica))
# Conectar a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla sigcom_historico si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS sigcom_historico (
id SERIAL PRIMARY KEY,
centros_de_costo VARCHAR(255),
codigo_item_de_costo VARCHAR(255),
item_de_costo VARCHAR(255),
monto DOUBLE PRECISION,
prod_primaria DOUBLE PRECISION,
prod_secundaria DOUBLE PRECISION,
prod_terciaria DOUBLE PRECISION,
prod_cuarta DOUBLE PRECISION,
tipo_de_ic VARCHAR(255),
establecimiento VARCHAR(255),
tipo_de_cc VARCHAR(255),
tipo_at VARCHAR(255),
fecha VARCHAR(255),
nro_camas DOUBLE PRECISION,
cod_deis DOUBLE PRECISION,
agrupacion DOUBLE PRECISION,
desc_agrupacion VARCHAR(255),
macro_zona VARCHAR(255),
region VARCHAR(255),
servicio_de_salud VARCHAR(255),
ano VARCHAR(255),
mes VARCHAR(255),
fijos_y_variables VARCHAR(255),
clasificacion_2 VARCHAR(255),
cluster VARCHAR(255)
);
"
dbExecute(con, create_table_query)
# Insertar los datos del data.frame BBDD_historica en la tabla sigcom_historico
dbWriteTable(con, "sigcom_historico", BBDD_historica, append = TRUE, row.names = FALSE)
View(BBDD_historica)
# Postgres ----------------------------------------------------------------
BBDD_historica <- clean_names(BBDD_2022_2023)
BBDD_historica$id <- seq_along(1:nrow(BBDD_historica))
# Conectar a la base de datos
con <- dbConnect(RPostgres::Postgres(),
dbname = "sigcom",
host = "localhost",
port = 5432,
user = "postgres",
password = "alevllgs")
# Crear la tabla sigcom_historico si no existe
create_table_query <- "
CREATE TABLE IF NOT EXISTS sigcom_historico (
centros_de_costo VARCHAR(255),
codigo_item_de_costo VARCHAR(255),
item_de_costo VARCHAR(255),
monto DOUBLE PRECISION,
prod_primaria DOUBLE PRECISION,
prod_secundaria DOUBLE PRECISION,
prod_terciaria DOUBLE PRECISION,
prod_cuarta DOUBLE PRECISION,
tipo_de_ic VARCHAR(255),
establecimiento VARCHAR(255),
tipo_de_cc VARCHAR(255),
tipo_at VARCHAR(255),
fecha VARCHAR(255),
nro_camas DOUBLE PRECISION,
cod_deis DOUBLE PRECISION,
agrupacion DOUBLE PRECISION,
desc_agrupacion VARCHAR(255),
macro_zona VARCHAR(255),
region VARCHAR(255),
servicio_de_salud VARCHAR(255),
ano VARCHAR(255),
mes VARCHAR(255),
fijos_y_variables VARCHAR(255),
clasificacion_2 VARCHAR(255),
cluster VARCHAR(255),
id SERIAL PRIMARY KEY
);
"
dbExecute(con, create_table_query)
# Insertar los datos del data.frame BBDD_historica en la tabla sigcom_historico
dbWriteTable(con, "sigcom_historico", BBDD_historica, append = TRUE, row.names = FALSE)
# Cerrar la conexión
dbDisconnect(con)
